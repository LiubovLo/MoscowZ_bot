import json

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from aiogram import F

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, types
from random import sample

from questions import QUESTIONS, ANIMALS

router = Router()


class Quiz(StatesGroup):
    quest = State()
    feadback = State()
    text_to_stuff = State()

    quiz_rezult = State()
    questions = State()


@router.message(Quiz.quest)
async def make_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    quiz_rezult, questions = data['quiz_rezult'], data['questions']

    if message.text.strip().lower() not in ['1', '2', '3', '4', '–Ω–∞—á–∞—Ç—å']:
        await message.answer(f'–Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª \n–û—Ç–≤–µ—Ç–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 4')
        return

    if message.text in ['1', '2', '3', '4']:
        if message.text == '1':
            quiz_rezult['amphibian'] += 1
        elif message.text == '2':
            quiz_rezult['reptile'] += 1
        elif message.text == '3':
            quiz_rezult['mammal'] += 1
        elif message.text == '4':
            quiz_rezult['bird'] += 1
        await state.update_data({'quiz_rezult': quiz_rezult})

    if not questions:
        await state.clear()
        win_category = max(quiz_rezult, key=quiz_rezult.get)
        for category, animals in ANIMALS.items():
            if category == win_category:
                win_animal = sample(animals, 1)[0]

                rezult_message = f'ü´ß –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º —ç—Ç–æ–≥–æ –º–∏–ª–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞ –¥—Ä—É–∑–µ–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞\n' \
                                 f'üêæ –í–∞—à –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π: <a href="{win_animal["url"]}">{win_animal["name"]}</a> üêæ \n\n' \
                                 f'ü´ß –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞: ' \
                                 f'<a href="https://moscowzoo.ru/about/guardianship">¬´–ö–ª—É–± –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞¬ª</a>'

                await state.set_data({'rezult_name': win_animal['name']})
                kb = [
                        [InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='replay')],
                        [InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ó–æ–æ–ø–∞—Ä–∫–∞', callback_data='contact')],
                        [InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK', callback_data='replay',
                                              url=f'https://vk.com/share.php?url={win_animal["url"]}'
                                                  f'&title=@totem_zoo_bot\n–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {win_animal["name"]}'
                                                  f'&image={win_animal["photo"]}',)],
                        [InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='feadback')]
                ]
                inlinekb = InlineKeyboardMarkup(inline_keyboard=kb)

                await message.answer(f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É \n'
                                     f'–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {win_animal["name"]}',
                                     reply_markup=types.ReplyKeyboardRemove())
                await message.answer_photo(photo=win_animal['photo'])

                await message.answer(rezult_message, parse_mode='HTML', reply_markup=inlinekb)

                return

    question = sample(questions, 1)[0]
    questions.pop(questions.index(question))
    answers = question['answers']
    await state. update_data({'questions': questions})
    builder = ReplyKeyboardBuilder()
    num = ['1', '2', '3', '4']
    for _ in num:
        builder.add(types.KeyboardButton(text=_))
    builder.adjust(4)

    await message.answer(
        f"{question['question']} \n"
        f"1) {answers[0]}\n"
        f"2) {answers[1]}\n"
        f"3) {answers[2]}\n"
        f"4) {answers[3]}\n",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@router.callback_query(F.data == 'replay')
async def replay(callback: types.CallbackQuery, state: FSMContext):
    await state.set_data(
        {'quiz_rezult': {
            'amphibian': 0,
            'reptile': 0,
            'mammal': 0,
            'bird': 0},
            'questions': QUESTIONS.copy()
        }
    )

    await state.set_state(Quiz.quest.state)
    kb = [[types.KeyboardButton(text='–ù–∞—á–∞—Ç—å')]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await callback.message.answer(f'–ù–∞—á–Ω—ë–º?', reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == 'contact')
async def contact(callback: types.CallbackQuery, state: FSMContext):
    rezult_name = await state.get_data()
    buttons = [[types.KeyboardButton(text=f'ü¶â –ß–∞—Ç —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ü¶â\n –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: \n{rezult_name["rezult_name"]}')]]
    kb = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    await callback.message.answer(f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞, '
                                  f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –õ—é–±–æ–≤—å—é: \n\n'
                                  f'‚úè   Telegram: @liubashai\n'
                                  f'‚úâ   E-mail: lovella1202@mail.ru\n'
                                  f'üìû   +7-9—Ö—Ö-—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö', reply_markup=kb)
    await state.set_state(Quiz.text_to_stuff.state)
    await callback.answer()


@router.message(Quiz.text_to_stuff)
async def text_to_stuff(message: types.Message, state: FSMContext):
    await message.copy_to(chat_id=1875707606, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@router.callback_query(F.data == 'feadback')
async def feadback_state(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Quiz.feadback.state)
    await callback.message.answer(
        f'ü´ß –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–ª–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é. \n\n'
        f'–ê –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –í–∞—Å üêª‚Äç‚ùÑ')
    await callback.answer()


@router.message(Quiz.feadback)
async def feadback_add(message: types.Message, state: FSMContext):
    with open('feadbacks.json', 'r', encoding='utf8') as fb_file:
        fb = json.load(fb_file)
        with open('feadbacks.json', 'w', encoding='utf8') as new_fb_file:
            new = {
                'feadback': message.text,
                'user': message.from_user.username
            }
            fb.append(new)
            new_data = json.dumps(fb, indent=4, ensure_ascii=False)
            new_fb_file.write(new_data)

    await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! ü¶â')
    await state.clear()